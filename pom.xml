<?xml version="1.0"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>fresco</groupId>
	<artifactId>fresco</artifactId>
	<version>0.2-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>FRESCO</name>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<skipTests>false</skipTests>
	</properties>

	<!-- ================= FRESCO DEPENDENCIES ============================ -->

	<dependencies>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
			<version>2.5</version>
		</dependency>

		<dependency>
			<groupId>commons-configuration</groupId>
			<artifactId>commons-configuration</artifactId>
			<version>1.6</version>
		</dependency>

		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-exec</artifactId>
			<version>1.2</version>
		</dependency>

		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.8.0</version>
		</dependency>

		<!-- USed for plaintext LP solving -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-math3</artifactId>
			<version>3.5</version>
		</dependency>

		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpclient</artifactId>
			<version>4.5.2</version>
		</dependency>

		<dependency>
			<groupId>org.bouncycastle</groupId>
			<artifactId>bcprov-jdk15on</artifactId>
			<version>1.53</version>
		</dependency>
		<!-- Database required jars -->

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.3.4.RELEASE</version>
		</dependency>

		<dependency>
			<groupId>org.apache.tomcat</groupId>
			<artifactId>tomcat-jdbc</artifactId>
			<version>8.0.28</version>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.4.193</version>
		</dependency>

		<!-- Scapi -->

		<dependency>
			<groupId>scapi</groupId>
			<artifactId>scapi</artifactId>
			<!-- Normally version should be e.g. 2.4.0, but we currently use a custom 
				version since we need the most recent changes for authenticated channels 
				to work, see https://github.com/cryptobiu/scapi/issues/71. -->
			<version>dfc8b2da384d87310c8f755b301bc085b1557671</version>
		</dependency>

		<!-- SCAPI currently has a separate java project for malicious yao We built 
			it into a jar and add it here. -->
		<dependency>
			<groupId>scapi</groupId>
			<artifactId>fastyao</artifactId>
			<version>b82956805dc9694d95d04e211c7bffab54294c21</version>
		</dependency>


		<!-- Library for parsing command line arguments. -->
		<dependency>
			<groupId>commons-cli</groupId>
			<artifactId>commons-cli</artifactId>
			<version>1.3</version>
		</dependency>


		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
	</dependencies>




	<!-- ================ FRESCO BUILD ========================== -->

	<profiles>
		<profile>
			<id>setintersection</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>2.0.2</version>
						<configuration>
							<encoding>UTF-8</encoding>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<appendAssemblyId>false</appendAssemblyId>
									<archive>
										<manifest>
											<mainClass>dk.alexandra.fresco.demo.PrivateSetDemo</mainClass>
										</manifest>
									</archive>
									<descriptorRefs>
										<descriptorRef>jar-with-dependencies</descriptorRef>
									</descriptorRefs>
									<finalName>${project.artifactId}-demo-setIntersection</finalName>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>2.0.2</version>
						<configuration>
							<encoding>UTF-8</encoding>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>

					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<version>2.2</version>
						<executions>
							<execution>
								<goals>
									<goal>test-jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- This does that 'mvn test' does not involve IntegrationTests. See 
						http://www.javacodegeeks.com/2015/01/separating-integration-tests-from-unit-tests-using-maven-failsafe-junit-category.html -->
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.18.1</version>
						<configuration>
							<forkCount>1</forkCount>
							<reuseForks>false</reuseForks>
							<excludedGroups>dk.alexandra.fresco.IntegrationTest</excludedGroups>
						</configuration>
					</plugin>

					<!-- Make 'mvn integration-test' do all tests, including, well, IntegrationTests. 
						See http://www.javacodegeeks.com/2015/01/separating-integration-tests-from-unit-tests-using-maven-failsafe-junit-category.html -->
					<plugin>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>2.18.1</version>
						<configuration>
							<includes>
								<include>**/*.java</include>
							</includes>
							<groups>dk.alexandra.fresco.IntegrationTest</groups>
						</configuration>
						<executions>
							<execution>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
					</plugin>

					<!-- This plugin is for building a jar with all included. We use that 
						in the Quickstart documentation. See http://stackoverflow.com/questions/574594/how-can-i-create-an-executable-jar-with-dependencies-using-maven -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<executions>
							<execution>
								<configuration>
									<archive>
										<manifest>
											<mainClass>fully.qualified.MainClass</mainClass>
										</manifest>
									</archive>
									<descriptorRefs>
										<descriptorRef>jar-with-dependencies</descriptorRef>
									</descriptorRefs>
								</configuration>
								<phase>package</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<!-- We has SCAPI as dependency. Since scapi is not included in any standard 
		mvn repository, and we dont want to set up our own corporate repository, 
		we create a 'local' repository in the file system (i.e., in our git reopostory). 
		See e.g. http://stackoverflow.com/questions/2229757/ maven-add-a-dependency-to-a-jar-by-relative-path 
		I installed the SCAPI jar using this command: tpj@ubuntu:~/fresco$ mvn org.apache.maven.plugins:maven-install-plugin:2.3.1:install-file 
		-Dfile=/Users/tpj/Scapi-2.4.0.jar -DgroupId=scapi -DartifactId=scapi -Dpackaging=jar 
		-Dversion=2.4.0 -DlocalRepositoryPath=./lib -->
	<repositories>
		<repository>
			<id>mvn-local-repo</id>
			<url>file://${basedir}/lib</url>
		</repository>
	</repositories>


</project>
